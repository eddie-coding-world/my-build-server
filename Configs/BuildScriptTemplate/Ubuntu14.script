
PROJECT_DIR={PROJECT_DIR}
HOST_SHARE_DIR_NAME={HOST_SHARE_DIR_NAME}
GIT_AUTH_USER={GIT_AUTH_USER}
GIT_AUTH_PASSWORD={GIT_AUTH_PASSWORD}
GIT_REPO_URL={GIT_REPO_URL}
GIT_PROTOCOL={GIT_PROTOCOL}
BUILD_USER={BUILD_USER}
BUILD_GROUP={BUILD_GROUP}
LOG_LINE_SEPARATOR={LOG_LINE_SEPARATOR}
LOG_ELEM_SEPARATOR={LOG_ELEM_SEPARATOR}
BUILD_TRUNK={BUILD_TRUNK}
BUILD_BRANCH={BUILD_BRANCH}
BUILD_LOG_FILE={BUILD_LOG_FILE}
BUILD_SH={BUILD_SH}
BUILD_RESULT_FILE={BUILD_RESULT_FILE}
GIT_LOG_FILE={GIT_LOG_FILE}
BUILD_SCRIPT_LOG_FILE={BUILD_SCRIPT_LOG_FILE}
VM_EXEC_STATUS_FILE={VM_EXEC_STATUS_FILE}
VM_EXEC_STATUS_ONGOING={VM_EXEC_STATUS_ONGOING}
VM_EXEC_STATUS_BEGIN_GIT_UPDATE_CODE={VM_EXEC_STATUS_BEGIN_GIT_UPDATE_CODE}
VM_EXEC_STATUS_FINISH_GIT_UPDATE_CODE={VM_EXEC_STATUS_FINISH_GIT_UPDATE_CODE}
VM_EXEC_STATUS_BEGIN_BUILD_CODE={VM_EXEC_STATUS_BEGIN_BUILD_CODE}
VM_EXEC_STATUS_FINISH_BUILD_CODE={VM_EXEC_STATUS_FINISH_BUILD_CODE}
VM_EXEC_STATUS_BEGIN_PACKAGE_FILES={VM_EXEC_STATUS_BEGIN_PACKAGE_FILES}
VM_EXEC_STATUS_FINISH_PACKAGE_FILES={VM_EXEC_STATUS_FINISH_PACKAGE_FILES}
VM_EXEC_STATUS_FINISHED={VM_EXEC_STATUS_FINISHED}
TASKS_INTERVAL_SECONDS={TASKS_INTERVAL_SECONDS}
BUILD_SUCCESS_MESSAGE={BUILD_SUCCESS_MESSAGE}
BUILD_ERROR_MESSAGE={BUILD_ERROR_MESSAGE}
BUILD_NO_BUILD_FILE_MESSAGE={BUILD_NO_BUILD_FILE_MESSAGE}
BUILD_RESULT_MESSAGE={BUILD_RESULT_MESSAGE}
UPDATE_GIT_CODE_ERROR_MESSAGE={UPDATE_GIT_CODE_ERROR_MESSAGE}

cd

BUILD_RESULT=
EXIT_CODE=

HOST_SHARE_DIR=$HOST_SHARE_DIR_NAME/$PROJECT_DIR

BUILD_LOG_FILE_PATH=$HOST_SHARE_DIR/$BUILD_LOG_FILE
BUILD_LOG_BACKUP_FILE_NAME=
BUILD_LOG_BACKUP_FILE_PATH=
#BUILD_LOG_BACKUP_FILE_PATH=$HOST_SHARE_DIR/$BUILD_LOG_FILE.$BUILD_BRANCH.`date +"%Y%m%d"`

BUILD_SESSION_ID=

BUILD_RESULT_FILE_PATH=$HOST_SHARE_DIR/$BUILD_RESULT_FILE
BUILD_RESULT_BACKUP_FILE_PATH=$HOST_SHARE_DIR/$BUILD_RESULT_FILE.$BUILD_BRANCH.`date +"%Y%m%d"`

GIT_LOG_FILE_PATH=$HOST_SHARE_DIR/$GIT_LOG_FILE
GIT_LOG_BACKUP_FILE_PATH=$HOST_SHARE_DIR/$GIT_LOG_FILE.$BUILD_BRANCH.`date +"%Y%m%d"`

BUILD_SCRIPT_LOG_FILE_PATH=$HOST_SHARE_DIR/$BUILD_SCRIPT_LOG_FILE
BUILD_SCRIPT_LOG_BACKUP_FILE_PATH=$HOST_SHARE_DIR/$BUILD_SCRIPT_LOG_FILE.$BUILD_BRANCH.`date +"%Y%m%d"`

PACKAGE_ZIP_FILE=
LASTEST_COMMIT_NUMBER=

VM_EXEC_STATUS_FILE=$HOST_SHARE_DIR_NAME/$VM_EXEC_STATUS_FILE
VM_EXEC_STATUS_FINISHED=$HOST_SHARE_DIR_NAME/$VM_EXEC_STATUS_FINISHED

BUILD_DIR=$PROJECT_DIR/$BUILD_BRANCH

echo "[`date +"%Y%m%d %T"`] Start build.script" > $VM_EXEC_STATUS_FILE
sleep $TASKS_INTERVAL_SECONDS
echo "" > $BUILD_SCRIPT_LOG_FILE_PATH

if [ ! -d $PROJECT_DIR ]
then
    mkdir -p $PROJECT_DIR
    echo "Created project dir $PROJECT_DIR" >> $BUILD_SCRIPT_LOG_FILE_PATH
fi
cd $PROJECT_DIR

echo "[`date +"%Y%m%d %T"`] Start to update git source code into trunk..." >> $BUILD_SCRIPT_LOG_FILE_PATH

echo "Start git update code procedure..." > $VM_EXEC_STATUS_FILE
sleep $TASKS_INTERVAL_SECONDS

if [ "$BUILD_BRANCH" = "$BUILD_TRUNK" ] && [ -d $BUILD_BRANCH ]
then
    cd $BUILD_BRANCH
	#eval git pull $GIT_PROTOCOL://$GIT_AUTH_USER:$GIT_AUTH_PASSWORD@$GIT_REPO_URL $BUILD_BRANCH
    RUN_GIT_RESULT=$(git pull $GIT_PROTOCOL://$GIT_AUTH_USER:$GIT_AUTH_PASSWORD@$GIT_REPO_URL $BUILD_BRANCH 2>&1)
	echo $RUN_GIT_RESULT >> $BUILD_SCRIPT_LOG_FILE_PATH
	EXIT_CODE=$?
else 
    eval git clone --branch $BUILD_BRANCH $GIT_PROTOCOL://$GIT_AUTH_USER:$GIT_AUTH_PASSWORD@$GIT_REPO_URL $BUILD_BRANCH
	EXIT_CODE=$?
    cd $BUILD_BRANCH
fi

echo "Finish git update code procedure...(exit code=$EXIT_CODE)" > $VM_EXEC_STATUS_FILE
sleep $TASKS_INTERVAL_SECONDS
echo "[`date +"%Y%m%d %T"`] Finished updating git source code into trunk..." >> $BUILD_SCRIPT_LOG_FILE_PATH

rm -rf $BUILD_LOG_FILE_PATH

if [ "$BUILD_BRANCH" != "$BUILD_TRUNK" ]
then
    BUILD_SESSION_ID=$BUILD_BRANCH
else
    LASTEST_COMMIT_NUMBER=`git rev-parse HEAD | head -c 8`
    BUILD_SESSION_ID=$BUILD_TRUNK-commit-$LASTEST_COMMIT_NUMBER-build-`date +"%Y%m%d"`
fi

echo $BUILD_SESSION_ID > $BUILD_LOG_FILE_PATH

if [ -f $BUILD_SH ]
then
    chmod 777 $BUILD_SH
	echo "Start build code procedure..." > $VM_EXEC_STATUS_FILE
	sleep $TASKS_INTERVAL_SECONDS

    echo "[`date +"%Y%m%d %T"`] Start to build source code for the first time..." >> $BUILD_SCRIPT_LOG_FILE_PATH
    ./$BUILD_SH 2>&1 >> $BUILD_LOG_FILE_PATH
	BUILD_RESULT=$?
    echo "[`date +"%Y%m%d %T"`] Finished building source code for the first time..." >> $BUILD_SCRIPT_LOG_FILE_PATH

	if [ "$BUILD_RESULT" != "0" ]
	then
		echo "[`date +"%Y%m%d %T"`] Start to build source code for the second time..." >> $BUILD_SCRIPT_LOG_FILE_PATH
	    ./$BUILD_SH 2>&1 >> $BUILD_LOG_FILE_PATH
		BUILD_RESULT=$?
		echo "[`date +"%Y%m%d %T"`] Finished building source code for the second time......" >> $BUILD_SCRIPT_LOG_FILE_PATH
	fi
    
    if [ "$BUILD_RESULT" = "0" ]
    then
        BUILD_RESULT_MESSAGE=$BUILD_SUCCESS_MESSAGE
    else
        BUILD_RESULT_MESSAGE=$BUILD_ERROR_MESSAGE
		cp $BUILD_LOG_FILE_PATH $BUILD_LOG_BACKUP_FILE_PATH
    fi
	
	echo "Finish build code procedure...(exit code=$BUILD_RESULT)" > $VM_EXEC_STATUS_FILE
	sleep $TASKS_INTERVAL_SECONDS
else 
    BUILD_RESULT_MESSAGE=$BUILD_NO_BUILD_FILE_MESSAGE
	
	echo "No $BUILD_SH file..." > $VM_EXEC_STATUS_FILE
	sleep $TASKS_INTERVAL_SECONDS
fi

echo $BUILD_RESULT_MESSAGE > $BUILD_RESULT_FILE_PATH
echo "[`date +"%Y%m%d %T"`] The build result = $BUILD_RESULT_MESSAGE" >> $BUILD_SCRIPT_LOG_FILE_PATH

sleep $TASKS_INTERVAL_SECONDS

#eval git log --pretty=format:'$LOG_LINE_SEPARATOR%h$LOG_ELEM_SEPARATOR%an$LOG_ELEM_SEPARATOR%ai$LOG_ELEM_SEPARATOR%s%n$LOG_ELEM_SEPARATOR%ce' > $GIT_LOG_FILE_PATH
eval git log > $GIT_LOG_FILE_PATH
echo "[`date +"%Y%m%d %T"`] Created the git history log report." >> $BUILD_SCRIPT_LOG_FILE_PATH


PACKAGE_ZIP_FILE=$BUILD_SESSION_ID.zip
rm -rf $PACKAGE_ZIP_FILE

if [ -f package.sh ]
then
	echo "Start package files procedure..." > $VM_EXEC_STATUS_FILE
	sleep $TASKS_INTERVAL_SECONDS
    ./package.sh $BUILD_SESSION_ID $HOST_SHARE_DIR
	EXIT_CODE=$?
	#Wait for 30 seconds for the package.sh finishing its job.
	sleep 30
	echo "Finish package files procedure...(exit code=$EXIT_CODE)" > $VM_EXEC_STATUS_FILE
else	
	echo "No package.sh file..." > $VM_EXEC_STATUS_FILE	
fi

sleep $TASKS_INTERVAL_SECONDS

if [ -f $PACKAGE_ZIP_FILE ]
then
    cp $PACKAGE_ZIP_FILE $HOST_SHARE_DIR
fi

if [ "$BUILD_BRANCH" != "$BUILD_TRUNK" ]
then    
    cd ..
    rm -rf $BUILD_BRANCH
fi

cp $BUILD_SCRIPT_LOG_FILE_PATH $BUILD_SCRIPT_LOG_BACKUP_FILE_PATH
cp $BUILD_RESULT_FILE_PATH $BUILD_RESULT_BACKUP_FILE_PATH
cp $GIT_LOG_FILE_PATH $GIT_LOG_BACKUP_FILE_PATH

echo "Finish build.script" > $VM_EXEC_STATUS_FILE
echo "[`date +"%Y%m%d %T"`] Finished the whole tasks." >> $BUILD_SCRIPT_LOG_FILE_PATH

sleep $TASKS_INTERVAL_SECONDS
echo "" > $VM_EXEC_STATUS_FINISHED